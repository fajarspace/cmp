import fs from "fs";
import path from "path";
import Head from "next/head";
import matter from "gray-matter";
import Link from "next/link";
import { metadata } from "@/next-seo";
import { format, formatISO, parseISO } from "date-fns";
import { useState } from "react";
import Image from "next/image";

export const getStaticProps = async () => {
  const files = fs.readdirSync(path.join("content/photos"));

  const photos = files
    .map((filename) => {
      const markdownWithMeta = fs.readFileSync(
        path.join("content/photos", filename),
        "utf-8"
      );
      const { data: frontmatter } = matter(markdownWithMeta);

      if (frontmatter.draft === true) {
        return null;
      }

      const slug = filename.split(".")[0];
      const dateISO = formatISO(frontmatter.date);

      return {
        frontmatter: {
          ...frontmatter,
          date: dateISO,
        },
        slug,
        href: `/photos/${slug}`,
      };
    })
    .filter((photo) => photo !== null);

  return {
    props: {
      photos,
    },
  };
};

export default function PhotoList({ photos }) {
  const pageTitle = `${metadata.title} - Photos`;
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const photosPerPage = 6;

  const filteredPhotos = (photos || [])
    .sort(
      (a, b) => new Date(b.frontmatter?.date) - new Date(a.frontmatter?.date)
    )
    .filter((photo) =>
      photo.frontmatter.title.toLowerCase().includes(searchQuery.toLowerCase())
    );

  const getCurrentPagePhotos = () => {
    const startIndex = (currentPage - 1) * photosPerPage;
    const endIndex = startIndex + photosPerPage;
    return filteredPhotos.slice(startIndex, endIndex);
  };

  const openModal = (photo) => {
    setSelectedPhoto(photo);
    document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
  };

  const closeModal = () => {
    setSelectedPhoto(null);
    document.body.style.overflow = "auto"; // Enable scrolling when modal is closed
  };

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>{pageTitle}</title>
      </Head>

      <section className="dark:bg-bg-color-dark bg-white relative z-10 py-16 md:py-20 lg:py-28">
        <div className="container columns-1 gap-4 sm:columns-2 xl:columns-3 2xl:columns-4">
          {/* Your main content here */}
          {getCurrentPagePhotos().map((photo, index) => (
            <div
              key={index}
              className="group relative mb-5 block w-full cursor-zoom-in"
            >
              <button
                onClick={() => openModal(photo)}
                className="after:content relative block w-full cursor-zoom-in"
              >
                <Image
                  alt="Next.js Conf photo"
                  className="transform rounded-lg brightness-90 transition will-change-auto group-hover:brightness-110"
                  src={photo.frontmatter.image}
                  width={720}
                  height={480}
                  sizes="(max-width: 640px) 100vw,
                      (max-width: 1280px) 50vw,
                      (max-width: 1536px) 33vw,
                      25vw"
                />
              </button>
            </div>
          ))}

          {/* Modal for Image Preview */}
          {selectedPhoto && (
            <div className="modal-overlay" onClick={closeModal}>
              <div className="modal">
                <span className="close" onClick={closeModal}>
                  &times;
                </span>
                <div className="modal-content">
                  <Image
                    alt={selectedPhoto.frontmatter.title}
                    src={selectedPhoto.frontmatter.image}
                    width={1200}
                    height={800}
                    placeholder="blur"
                    blurDataURL={selectedPhoto.frontmatter.image}
                    className="rounded-lg object-center object-cover w-full h-full"
                  />
                </div>
              </div>
            </div>
          )}
        </div>
      </section>
    </>
  );
}
